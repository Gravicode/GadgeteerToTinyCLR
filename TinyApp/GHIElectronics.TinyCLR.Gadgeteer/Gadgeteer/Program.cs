// Generated by .NET Reflector from C:\Program Files (x86)\Microsoft .NET Gadgeteer\Core\Assemblies\.NET Micro Framework 4.3\Gadgeteer.dll
namespace Gadgeteer
{
    using Gadgeteer.Modules;
    //using Microsoft.SPOT;
    //using Microsoft.SPOT.Hardware;
    using System;
    using System.Diagnostics;
    using System.Runtime.CompilerServices;
    using System.Threading;

    public class Program
    {
        private Application _application;
        private static Microsoft.SPOT.Dispatcher _dispatcher = null;
        private Thread _dispatcherBlockChecker;
        private static bool _dispatcherStarted = false;
        private static bool _instanceExists = false;
        private static Gadgeteer.Mainboard _Mainboard;
        private static bool _runCalled = false;
        private Timer LEDOffTimer;
        private static DispatcherOperationCallback Operator = new DispatcherOperationCallback(null, (IntPtr)DoOperation);

        public static event InvokeEventHandler Invoke
        {
            add
            {
                BeginInvoke((Delegate)value, null);
            }
            remove
            {
                Debug.WriteLine("GT.Program.Invoke is not a regular event - you cannot remove handlers from it.");
            }
        }

        protected Program()
        {
            if (Mainboard == null)
            {
                throw new Exception("Mainboard must be specified before a Program can be started.");
            }
            if (Dispatcher != Microsoft.SPOT.Dispatcher.get_CurrentDispatcher())
            {
                throw new Exception("Program must be instantiated on main (Dispatcher) thread.");
            }
            if (_instanceExists)
            {
                throw new Exception("Cannot instantiate two Programs");
            }
            try
            {
                this._application = new Application();
            }
            catch
            {
                Debug.WriteLine("Error on boot - WPF may not work");
            }
            _instanceExists = true;
            this._dispatcherBlockChecker = new Thread(new ThreadStart(this.DispatcherBlockChecker));
            this._dispatcherBlockChecker.Start();
        }

        public static void BeginInvoke(Delegate method, params object[] args)
        {
            if ((method != null) && (Dispatcher != null))
            {
                Dispatcher.BeginInvoke(Operator, new Operation(method, args));
            }
        }

        public static bool CheckAndInvoke(Delegate eventTriggered, Delegate onEvent, params object[] args)
        {
            if ((eventTriggered != null) && (onEvent != null))
            {
                if (Dispatcher.CheckAccess())
                {
                    return true;
                }
                BeginInvoke(onEvent, args);
            }
            return false;
        }

        private void DispatcherBlockChecker()
        {
            int num = 10;
            int num2 = 0;
            while (true)
            {
                num2 += num;
                Thread.Sleep((int)(num * 0x3e8));
                if (_dispatcherStarted)
                {
                    return;
                }
                if (_runCalled)
                {
                    Debug.WriteLine("WARN: Total initialization time exceeds " + num2 + " seconds.\n    : Mainboard.PostInit or LCD initialization is blocking execution.\n    : Events and timers do not yet run because the dispatcher is not started.");
                }
                else
                {
                    Debug.WriteLine("WARN: Total initialization time exceeds " + num2 + " seconds.\n    : ProgramStarted is blocking execution, which means events and timers will not run properly.\n    : Make sure not to use blocking code such as while(true) - use a GT.Timer instead.");
                }
            }
        }

        private static object DoOperation(object op)
        {
            Operation operation = (Operation)op;
            try
            {
                operation.method.get_Method().Invoke(operation.method.get_Target(), operation.args);
            }
            catch
            {
                Debug.WriteLine("Error invoking method \"" + operation.method.get_Method().get_DeclaringType() + "\" (check arguments to Program.BeginInvoke are correct)");
            }
            return null;
        }

        private void LEDOffTimer_Tick(Timer timer)
        {
            this.LEDOffTimer.Stop();
            Mainboard.SetDebugLED(false);
        }

        public void PulseDebugLED()
        {
            if (this.LEDOffTimer == null)
            {
                this.LEDOffTimer = new Timer(new TimeSpan(0, 0, 0, 0, 10));
                this.LEDOffTimer.Tick += new Timer.TickEventHandler(this.LEDOffTimer_Tick);
            }
            Mainboard.SetDebugLED(true);
            Debug.WriteLine("PulseDebugLED called");
            this.LEDOffTimer.Start();
        }

        public void Reboot()
        {
            PowerState.RebootDevice(false);
        }

        protected void Run()
        {
            if (_runCalled)
            {
                throw new Exception("Do not call GT.Program.Run twice (templates should call it once already)");
            }
            _runCalled = true;
            Mainboard.PostInit();
            _dispatcherStarted = true;
            Microsoft.SPOT.Dispatcher.Run();
        }

        internal static Microsoft.SPOT.Dispatcher Dispatcher
        {
            get
            {
                if (_dispatcher == null)
                {
                    _dispatcher = Microsoft.SPOT.Dispatcher.get_CurrentDispatcher();
                }
                return _dispatcher;
            }
        }

        protected internal static Gadgeteer.Mainboard Mainboard
        {
            get
            {
                if (_Mainboard == null)
                {
                    throw new Exception("Program instance must be constructed before Mainboard or any module is used (use a template)");
                }
                return _Mainboard;
            }
            protected set
            {
                if (_Mainboard != null)
                {
                    throw new Exception("Mainboard cannot be initialised twice");
                }
                Module.Mainboard = _Mainboard = value;
                Debug.WriteLine("Using mainboard " + Mainboard.MainboardName + " version " + Mainboard.MainboardVersion);
            }
        }

        public delegate void InvokeEventHandler();

        private class Operation
        {
            public object[] args;
            public Delegate method;

            public Operation(Delegate method, object[] args)
            {
                this.method = method;
                this.args = args;
            }
        }
    }
}
