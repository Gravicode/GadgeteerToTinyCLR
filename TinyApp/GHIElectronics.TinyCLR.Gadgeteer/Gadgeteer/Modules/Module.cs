// Generated by .NET Reflector from C:\Program Files (x86)\Microsoft .NET Gadgeteer\Core\Assemblies\.NET Micro Framework 4.3\Gadgeteer.dll
namespace Gadgeteer.Modules
{
    using Gadgeteer;
    //using Microsoft.SPOT;
    //using Microsoft.SPOT.Hardware;
    //using Microsoft.SPOT.Net.NetworkInformation;
    //using Microsoft.SPOT.Presentation;
    //using Microsoft.SPOT.Presentation.Media;
    using System;
    using System.Collections;
    using System.Diagnostics;
    using System.Drawing;
    using System.IO;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;

    public abstract class Module
    {
        public bool DebugPrintEnabled;
        //protected internal static Gadgeteer.Mainboard Mainboard;
        private static ArrayList modules = new ArrayList();

        protected Module()
        {
            /*
            if (!Program.Dispatcher.CheckAccess())
            {
                throw new Exception("Modules must be created on the Program's Dispatcher thread");
            }*/
            modules.Add(this);
        }

        protected void DebugPrint(string message)
        {
            if (this.DebugPrintEnabled)
            {
                Debug.WriteLine(this.ToString() + " : " + message);
            }
        }

        protected void ErrorPrint(string message)
        {
            Debug.WriteLine(this.ToString() + " ERROR : " + message);
        }

        public override string ToString()
        {
            return base.GetType().Name;
        }
        /*
        public abstract class DisplayModule : Module
        {
            private string _displayModel;
            private DrawingContext _drawingContext;
            private int _height;
            private static bool _isAnyWpfWindowRedirected;
            private DisplayOrientation _orientation;
            private static DrawingContext _passThroughDC;
            private SimpleGraphicsInterface _simpleGraphics;
            private TimingRequirements _timing;
            private int _width;
            private readonly WpfMode _wpfMode;
            private Window _wpfWindow;

            protected DisplayModule(WpfMode wpfMode)
            {
                this._wpfMode = wpfMode;
            }
            
            protected bool OnDisplayConnected(string displayModel, int width, int height, DisplayOrientation orientation, TimingRequirements timing)
            {
                bool flag = true;
                if (displayModel == null)
                {
                    displayModel = base.GetType().get_Name();
                }
                if (this._wpfMode == WpfMode.PassThrough)
                {
                    try
                    {
                        Module.Mainboard.OnOnboardControllerDisplayConnected(displayModel, width, height, (int)orientation, timing);
                        this.RestartIfRequired();
                    }
                    catch (Exception exception)
                    {
                        base.ErrorPrint(string.Concat(new object[] { "A display '", displayModel, "' with resolution ", width, "\x00d7", height, " and ", orientation, " orientation was connected. However, the mainboard is unable to fulfil its requirements. ", exception.get_Message() }));
                        flag = false;
                    }
                }
                this._displayModel = displayModel;
                this._timing = timing;
                if (((width != this._width) || (height != this._height)) || ((this._orientation != orientation) && (width != height)))
                {
                    this._width = width;
                    this._height = height;
                    this._orientation = orientation;
                    if (this._drawingContext != null)
                    {
                        this.RecreateDrawingContext();
                    }
                    return flag;
                }
                this._orientation = orientation;
                return flag;
            }
        
            protected void OnDisplayDisconnected()
            {
                if (this._wpfMode == WpfMode.PassThrough)
                {
                    Module.Mainboard.OnOnboardControllerDisplayDisconnected();
                }
            }

            protected abstract void Paint(Bitmap bitmap, int x, int y, int width, int height);
            private static void PostRenderFix(DrawingContext dc)
            {
                if (_passThroughDC != null)
                {
                    dc.DrawImage(_passThroughDC.get_Bitmap(), 0, 0, 0, 0, _passThroughDC.get_Width(), _passThroughDC.get_Height());
                }
            }

            private void RecreateDrawingContext()
            {
                if (!Program.Dispatcher.CheckAccess())
                {
                    Program.Invoke += new Program.InvokeEventHandler(this.RecreateDrawingContext);
                }
                else
                {
                    Bitmap bitmap = null;
                    if (this._drawingContext != null)
                    {
                        bitmap = this._drawingContext.get_Bitmap();
                        this._drawingContext.Dispose();
                    }
                    int num = this._width;
                    int num2 = this._height;
                    if ((this._orientation % DisplayOrientation.UpsideDown) != DisplayOrientation.Normal)
                    {
                        num = this._height;
                        num2 = this._width;
                    }
                    this._drawingContext = new DrawingContext(num, num2);
                    if (bitmap != null)
                    {
                        this._drawingContext.get_Bitmap().DrawImage(0, 0, bitmap, 0, 0, bitmap.get_Width(), bitmap.get_Height(), 0x100);
                        if (this._simpleGraphics != null)
                        {
                            this._simpleGraphics.OnDrawingContextInvalidated();
                        }
                    }
                    if ((this._wpfWindow != null) && (this._wpfMode != WpfMode.PassThrough))
                    {
                        this._wpfWindow.InvalidateMeasure();
                    }
                }
            }

            private void RestartIfRequired()
            {
                if ((this._wpfWindow != null) && (Window.MediaContextCachedWidth >= 0))
                {
                    int num;
                    int num2;
                    int num3;
                    int num4;
                    HardwareProvider.HwProvider.GetLCDMetrics(out num, out num2, out num3, out num4);
                    if ((num != Window.MediaContextCachedWidth) || (num2 != Window.MediaContextCachedHeight))
                    {
                        Debug.WriteLine("Updating display configuration. THE MAINBOARD WILL NOW REBOOT.");
                        Debug.WriteLine("To continue debugging, you will need to restart debugging manually (Ctrl+Shift+F5).");
                        Thread.Sleep(0x3e8);
                        PowerState.RebootDevice(false);
                    }
                    if ((num != this._width) && (num != this._height))
                    {
                        Debug.WriteLine("ERROR: The mainboard did not update the display configuration correctly. THE MAINBOARD WILL BE REBOOTED NOW.");
                        Debug.WriteLine("To continue debugging, you will need to restart debugging manually (Ctrl+Shift+F5).");
                        Thread.Sleep(0x3e8);
                        PowerState.RebootDevice(false);
                    }
                }
            }

            protected virtual void SetOrientationOverride(DisplayOrientation orientation)
            {
                if (orientation != this._orientation)
                {
                    throw new NotSupportedException();
                }
            }

            protected virtual bool SupportsOrientationOverride(DisplayOrientation orientation)
            {
                return (orientation == this._orientation);
            }

            public string DisplayModel
            {
                get
                {
                    return this._displayModel;
                }
            }

            public int Height
            {
                get
                {
                    return this._height;
                }
            }

            public DisplayOrientation Orientation
            {
                get
                {
                    return this._orientation;
                }
                set
                {
                    if (this._wpfMode == WpfMode.PassThrough)
                    {
                        DisplayOrientation orientation = this._orientation;
                        if (!this.OnDisplayConnected(this._displayModel, this._width, this._height, value, this._timing))
                        {
                            this.OnDisplayConnected(this._displayModel, this._width, this._height, orientation, this._timing);
                        }
                    }
                    else if (this.SupportsOrientationOverride(value))
                    {
                        try
                        {
                            this.SetOrientationOverride(value);
                        }
                        catch (Exception exception)
                        {
                            base.ErrorPrint("The orientation could not be changed. " + exception.get_Message());
                        }
                    }
                    else
                    {
                        base.ErrorPrint("This display does not support changing orientation.");
                    }
                }
            }

            public SimpleGraphicsInterface SimpleGraphics
            {
                get
                {
                    if (this._simpleGraphics == null)
                    {
                        if (this._drawingContext == null)
                        {
                            this.RecreateDrawingContext();
                        }
                        this._simpleGraphics = new SimpleGraphicsInterface(this);
                        if (this._wpfMode == WpfMode.PassThrough)
                        {
                            _passThroughDC = this._drawingContext;
                            if (_isAnyWpfWindowRedirected)
                            {
                                WindowManager.Instance.add_PostRender(new PostRenderEventHandler(null, (IntPtr)PostRenderFix));
                            }
                        }
                    }
                    return this._simpleGraphics;
                }
            }

            public int Width
            {
                get
                {
                    return this._width;
                }
            }

            public Window WPFWindow
            {
                get
                {
                    if (this._wpfWindow == null)
                    {
                        this._wpfWindow = new Window(this);
                        if (this._wpfMode == WpfMode.Separate)
                        {
                            if (this._drawingContext == null)
                            {
                                this.RecreateDrawingContext();
                            }
                            _isAnyWpfWindowRedirected = true;
                            if (_passThroughDC != null)
                            {
                                WindowManager.Instance.add_PostRender(new PostRenderEventHandler(null, (IntPtr)PostRenderFix));
                            }
                        }
                    }
                    return this._wpfWindow;
                }
            }
            */
            public enum DisplayOrientation
            {
                Clockwise90Degrees = 90,
                Counterclockwise90Degrees = 270,
                Normal = 0,
                UpsideDown = 180
            }

            /*
            public class SimpleGraphicsInterface : IDisposable
            {
                private bool _autoRedraw;
                private Color _backgroundColor;
                private Module.DisplayModule _displayModule;
                private int _height;
                private bool _redrawAll;
                private Bitmap _screen;
                private int _width;

                internal SimpleGraphicsInterface(Module.DisplayModule displayModule)
                {
                    this._displayModule = displayModule;
                    this._backgroundColor = Color.Black;
                    this._autoRedraw = true;
                    this._screen = this._displayModule._drawingContext.get_Bitmap();
                    this._width = this._screen.get_Width();
                    this._height = this._screen.get_Height();
                    this.Clear();
                }

                public void Clear()
                {
                    this._screen.DrawRectangle((Color)this._backgroundColor, 0, 0, 0, this._width, this._height, 0, 0, (Color)this._backgroundColor, 0, 0, (Color)this._backgroundColor, 0, 0, 0x100);
                    if (this._autoRedraw)
                    {
                        this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                        this._redrawAll = false;
                    }
                }

                public void ClearNoRedraw()
                {
                    this._screen.DrawRectangle((Color)this._backgroundColor, 0, 0, 0, this._width, this._height, 0, 0, (Color)this._backgroundColor, 0, 0, (Color)this._backgroundColor, 0, 0, 0x100);
                    this._redrawAll = true;
                }

                public void DisplayEllipse(Color outlineColor, int thicknessOutline, Color fillColor, int x, int y, int xRadius, int yRadius)
                {
                    this.DisplayEllipse(outlineColor, thicknessOutline, x, y, xRadius, yRadius, fillColor, 0, 0, fillColor, 0, 0, 0x100);
                }

                public void DisplayEllipse(Color outlineColor, int thicknessOutline, Color fillColor, int x, int y, int xRadius, int yRadius, ushort opacity)
                {
                    this.DisplayEllipse(outlineColor, thicknessOutline, x, y, xRadius, yRadius, fillColor, 0, 0, fillColor, 0, 0, opacity);
                }

                public void DisplayEllipse(Color outlineColor, int thicknessOutline, int x, int y, int xRadius, int yRadius, Color colorGradientStart, int xGradientStart, int yGradientStart, Color colorGradientEnd, int xGradientEnd, int yGradientEnd, ushort opacity)
                {
                    this._screen.DrawEllipse((Color)outlineColor, thicknessOutline, x, y, xRadius, yRadius, (Color)colorGradientStart, xGradientStart, yGradientStart, (Color)colorGradientEnd, xGradientEnd, yGradientEnd, opacity);
                    if (this._autoRedraw)
                    {
                        if (this._redrawAll)
                        {
                            this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                            this._redrawAll = false;
                        }
                        else
                        {
                            int num = x - xRadius;
                            int num2 = y - yRadius;
                            int num3 = x + xRadius;
                            int num4 = y + yRadius;
                            if (thicknessOutline > 1)
                            {
                                num -= thicknessOutline;
                                num2 -= thicknessOutline;
                                num3 += thicknessOutline - 1;
                                num4 += thicknessOutline;
                            }
                            if (num < 0)
                            {
                                num = 0;
                            }
                            if (num2 < 0)
                            {
                                num2 = 0;
                            }
                            if (num3 >= this._width)
                            {
                                num3 = this._width - 1;
                            }
                            if (num4 >= this._height)
                            {
                                num4 = this._height - 1;
                            }
                            if (((num3 >= 0) && (num4 >= 0)) && ((num < this._width) && (num2 < this._height)))
                            {
                                this._displayModule.Paint(this._screen, num, num2, (num3 - num) + 1, (num4 - num2) + 1);
                            }
                        }
                    }
                }

                public void DisplayImage(Picture picture, int x, int y)
                {
                    Bitmap bitmap = (Bitmap)picture;
                    this.DisplayImage(bitmap, x, y, 0, 0, bitmap.get_Width(), bitmap.get_Height());
                }

                public void DisplayImage(Bitmap bitmap, int x, int y)
                {
                    this.DisplayImage(bitmap, x, y, 0, 0, bitmap.get_Width(), bitmap.get_Height());
                }

                public void DisplayImage(string filePath, Bitmap.BitmapImageType imageType, int x, int y)
                {
                    Bitmap bitmap = new Bitmap(File.ReadAllBytes(filePath), imageType);
                    this.DisplayImage(bitmap, x, y, 0, 0, bitmap.get_Width(), bitmap.get_Height());
                }

                public void DisplayImage(Picture picture, int x, int y, int xSrc, int ySrc, int width, int height)
                {
                    this.DisplayImage((Bitmap)picture, x, y, xSrc, ySrc, width, height);
                }

                public void DisplayImage(Bitmap bitmap, int x, int y, int xSrc, int ySrc, int width, int height)
                {
                    this._screen.DrawImage(x, y, bitmap, xSrc, ySrc, width, height);
                    if (this._autoRedraw)
                    {
                        if (this._redrawAll)
                        {
                            this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                            this._redrawAll = false;
                        }
                        else
                        {
                            int num = x + width;
                            int num2 = y + height;
                            if (num >= this._width)
                            {
                                num = this._width - 1;
                            }
                            if (num2 >= this._height)
                            {
                                num2 = this._height - 1;
                            }
                            if (x < 0)
                            {
                                x = 0;
                            }
                            if (y < 0)
                            {
                                y = 0;
                            }
                            if (((num >= 0) && (num2 >= 0)) && ((x < this._width) && (y < this._height)))
                            {
                                this._displayModule.Paint(this._screen, x, y, (num - x) + 1, (num2 - y) + 1);
                            }
                        }
                    }
                }

                public void DisplayImage(string filePath, Bitmap.BitmapImageType imageType, int x, int y, int xSrc, int ySrc, int width, int height)
                {
                    Bitmap bitmap = new Bitmap(File.ReadAllBytes(filePath), imageType);
                    this.DisplayImage(bitmap, x, y, xSrc, xSrc, width, height);
                }

                public void DisplayLine(Color color, int thickness, int x0, int y0, int x1, int y1)
                {
                    this._screen.DrawLine((Color)color, thickness, x0, y0, x1, y1);
                    if (this._autoRedraw)
                    {
                        if (this._redrawAll)
                        {
                            this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                            this._redrawAll = false;
                        }
                        else
                        {
                            int y = y0;
                            int x = x0;
                            int num3 = x1;
                            int num4 = y1;
                            if (y0 > y1)
                            {
                                y = y1;
                                num4 = y0;
                            }
                            if (x0 > x1)
                            {
                                x = x1;
                                num3 = x0;
                            }
                            if (thickness > 1)
                            {
                                y -= thickness;
                                x -= thickness;
                                num3 += thickness - 1;
                                num4 += thickness;
                            }
                            if (y < 0)
                            {
                                y = 0;
                            }
                            if (x < 0)
                            {
                                x = 0;
                            }
                            if (num3 >= this._width)
                            {
                                num3 = this._width - 1;
                            }
                            if (num4 >= this._height)
                            {
                                num4 = this._height - 1;
                            }
                            this._displayModule.Paint(this._screen, x, y, (num3 - x) + 1, (num4 - y) + 1);
                        }
                    }
                }

                public void DisplayRectangle(Color outlineColor, int thicknessOutline, Color fillColor, int x, int y, int width, int height)
                {
                    this.DisplayRectangle(outlineColor, thicknessOutline, x, y, width, height, 0, 0, fillColor, 0, 0, fillColor, 0, 0, 0x100);
                }

                public void DisplayRectangle(Color outlineColor, int thicknessOutline, Color fillColor, int x, int y, int width, int height, ushort opacity)
                {
                    this.DisplayRectangle(outlineColor, thicknessOutline, x, y, width, height, 0, 0, fillColor, 0, 0, fillColor, 0, 0, opacity);
                }

                public void DisplayRectangle(Color outlineColor, int thicknessOutline, Color fillColor, int x, int y, int width, int height, int cornerRadius, ushort opacity)
                {
                    this.DisplayRectangle(outlineColor, thicknessOutline, x, y, width, height, cornerRadius, cornerRadius, fillColor, 0, 0, fillColor, 0, 0, opacity);
                }

                public void DisplayRectangle(Color outlineColor, int thicknessOutline, int x, int y, int width, int height, int xCornerRadius, int yCornerRadius, Color colorGradientStart, int xGradientStart, int yGradientStart, Color colorGradientEnd, int xGradientEnd, int yGradientEnd, ushort opacity)
                {
                    this._screen.DrawRectangle((Color)outlineColor, thicknessOutline, x, y, width, height, xCornerRadius, yCornerRadius, (Color)colorGradientStart, xGradientStart, yGradientStart, (Color)colorGradientEnd, xGradientEnd, yGradientEnd, opacity);
                    if (this._autoRedraw)
                    {
                        if (this._redrawAll)
                        {
                            this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                            this._redrawAll = false;
                        }
                        else
                        {
                            int num = (x + width) - 1;
                            int num2 = (y + height) - 1;
                            if (thicknessOutline > 1)
                            {
                                int num3 = thicknessOutline / 2;
                                x -= num3;
                                y -= num3;
                                num += num3;
                                num2 += num3;
                            }
                            if (num >= this._width)
                            {
                                num = this._width - 1;
                            }
                            if (num2 >= this._height)
                            {
                                num2 = this._height - 1;
                            }
                            if (x < 0)
                            {
                                x = 0;
                            }
                            if (y < 0)
                            {
                                y = 0;
                            }
                            if (((num >= 0) && (num2 >= 0)) && ((x < this._width) && (y < this._height)))
                            {
                                this._displayModule.Paint(this._screen, x, y, (num - x) + 1, (num2 - y) + 1);
                            }
                        }
                    }
                }

                public void DisplayText(string text, Font font, Color color, int x, int y)
                {
                    this._screen.DrawText(text, font, (Color)color, x, y);
                    if (this._autoRedraw)
                    {
                        if (this._redrawAll)
                        {
                            this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                            this._redrawAll = false;
                        }
                        else
                        {
                            int num;
                            int num2;
                            font.ComputeExtent(text, ref num, ref num2);
                            num += x;
                            num2 += y;
                            if (num >= this._width)
                            {
                                num = this._width - 1;
                            }
                            if (num2 >= this._height)
                            {
                                num2 = this._height - 1;
                            }
                            if (x < 0)
                            {
                                x = 0;
                            }
                            if (y < 0)
                            {
                                y = 0;
                            }
                            if (((num >= 0) && (num2 >= 0)) && ((x < this._width) && (y < this._height)))
                            {
                                this._displayModule.Paint(this._screen, x, y, (num - x) + 1, (num2 - y) + 1);
                            }
                        }
                    }
                }

                public void DisplayTextInRectangle(string text, int x, int y, int width, int height, Color color, Font font)
                {
                    this.DisplayTextInRectangle(text, x, y, width, height, color, font, TextAlign.Left, WordWrap.None, Trimming.WordEllipsis, ScaleText.None);
                }

                public void DisplayTextInRectangle(string text, int x, int y, int width, int height, Color color, Font font, TextAlign textAlignment)
                {
                    this.DisplayTextInRectangle(text, x, y, width, height, color, font, textAlignment, WordWrap.None, Trimming.WordEllipsis, ScaleText.None);
                }

                public void DisplayTextInRectangle(string text, int x, int y, int width, int height, Color color, Font font, TextAlign textAlignment, WordWrap wordWrap, Trimming trimming, ScaleText scaleTextToFit)
                {
                    uint num = 0;
                    switch (textAlignment)
                    {
                        case TextAlign.Center:
                            num |= 2;
                            break;

                        case TextAlign.Left:
                            num |= 0;
                            break;

                        case TextAlign.Right:
                            num |= 0x20;
                            break;
                    }
                    if (trimming != Trimming.WordEllipsis)
                    {
                        if (trimming == Trimming.CharacterEllipsis)
                        {
                            num |= 0x40;
                        }
                    }
                    else
                    {
                        num |= 8;
                    }
                    if (wordWrap == WordWrap.Wrap)
                    {
                        num |= 1;
                    }
                    if (scaleTextToFit == ScaleText.None)
                    {
                        num |= 0x10;
                    }
                    this._screen.DrawTextInRect(text, x, y, width, height, num, (Color)color, font);
                    if (this._autoRedraw)
                    {
                        if (this._redrawAll)
                        {
                            this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                            this._redrawAll = false;
                        }
                        else
                        {
                            int num2;
                            int num3;
                            font.ComputeTextInRect(text, ref num2, ref num3, 0, 0, width, height, num);
                            num2 += x;
                            num3 += y;
                            if (num2 >= this._width)
                            {
                                num2 = this._width - 1;
                            }
                            if (num3 >= this._height)
                            {
                                num3 = this._height - 1;
                            }
                            if (x < 0)
                            {
                                x = 0;
                            }
                            if (y < 0)
                            {
                                y = 0;
                            }
                            if (((num2 >= 0) && (num3 >= 0)) && ((x < this._width) && (y < this._height)))
                            {
                                this._displayModule.Paint(this._screen, x, y, (num2 - x) + 1, (num3 - y) + 1);
                            }
                        }
                    }
                }

                public Color GetPixel(int x, int y)
                {
                    return this._screen.GetPixel(x, y);
                }

                internal void OnDrawingContextInvalidated()
                {
                    this._screen = this._displayModule._drawingContext.get_Bitmap();
                    this._width = this._screen.get_Width();
                    this._height = this._screen.get_Height();
                }

                public void Redraw()
                {
                    this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                    this._redrawAll = false;
                }

                public void SetPixel(Color color, int x, int y)
                {
                    this._screen.SetPixel(x, y, (Color)color);
                    if (this._autoRedraw)
                    {
                        if (this._redrawAll)
                        {
                            this._displayModule.Paint(this._screen, 0, 0, this._width, this._height);
                            this._redrawAll = false;
                        }
                        else if (((x >= 0) && (x < this._width)) && ((y >= 0) && (y < this._height)))
                        {
                            this._displayModule.Paint(this._screen, x, y, 1, 1);
                        }
                    }
                }

                void IDisposable.Dispose()
                {
                    this._displayModule._simpleGraphics = null;
                    if (Module.DisplayModule._passThroughDC == this._displayModule._drawingContext)
                    {
                        WindowManager.Instance.remove_PostRender(new PostRenderEventHandler(null, (IntPtr)Module.DisplayModule.PostRenderFix));
                        Module.DisplayModule._passThroughDC = null;
                    }
                }

                public bool AutoRedraw
                {
                    get
                    {
                        return this._autoRedraw;
                    }
                    set
                    {
                        this._autoRedraw = value;
                    }
                }

                public Color BackgroundColor
                {
                    get
                    {
                        return this._backgroundColor;
                    }
                    set
                    {
                        this._backgroundColor = value;
                        if (this._autoRedraw)
                        {
                            this.Clear();
                        }
                    }
                }

                public int Height
                {
                    get
                    {
                        return this._height;
                    }
                }

                public int Width
                {
                    get
                    {
                        return this._width;
                    }
                }

                public enum ScaleText
                {
                    None,
                    ScaleToFit
                }

                public enum TextAlign
                {
                    Center,
                    Left,
                    Right
                }

                public enum Trimming
                {
                    WordEllipsis,
                    CharacterEllipsis
                }

                public enum WordWrap
                {
                    None,
                    Wrap
                }
            }

            public class TimingRequirements
            {
                public bool CommonSyncPinIsActiveHigh;
                public byte HorizontalBackPorch;
                public byte HorizontalFrontPorch;
                public bool HorizontalSyncPulseIsActiveHigh;
                public byte HorizontalSyncPulseWidth;
                public uint MaximumClockSpeed;
                public bool PixelDataIsActiveHigh;
                public bool PixelDataIsValidOnClockRisingEdge;
                public bool UsesCommonSyncPin;
                public byte VerticalBackPorch;
                public byte VerticalFrontPorch;
                public bool VerticalSyncPulseIsActiveHigh;
                public byte VerticalSyncPulseWidth;
            }

            public class Window : Window
            {
                private readonly Gadgeteer.Modules.Module.DisplayModule _displayModule;
                private readonly bool _redirect;
                internal static int MediaContextCachedHeight = -1;
                internal static int MediaContextCachedWidth = -1;

                internal Window(Gadgeteer.Modules.Module.DisplayModule displayModule)
                {
                    this._displayModule = displayModule;
                    this._redirect = displayModule._wpfMode == Gadgeteer.Modules.Module.DisplayModule.WpfMode.Separate;
                    if (MediaContextCachedWidth < 0)
                    {
                        int num;
                        int num2;
                        HardwareProvider.HwProvider.GetLCDMetrics(out MediaContextCachedWidth, out MediaContextCachedHeight, out num, out num2);
                    }
                    if (this._redirect)
                    {
                        base.set_Width(this._displayModule._width);
                        base.set_Height(this._displayModule._height);
                    }
                    else
                    {
                        base.set_Width(MediaContextCachedWidth);
                        base.set_Height(MediaContextCachedHeight);
                    }
                    base.set_Visibility(0);
                }

                protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight)
                {
                    if (this._redirect)
                    {
                        base.ArrangeOverride(this._displayModule._width, this._displayModule._height);
                    }
                    else
                    {
                        base.ArrangeOverride(arrangeWidth, arrangeHeight);
                    }
                }

                protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight)
                {
                    if (this._redirect)
                    {
                        base.MeasureOverride(this._displayModule._width, this._displayModule._height, ref desiredWidth, ref desiredHeight);
                    }
                    else
                    {
                        base.MeasureOverride(availableWidth, availableHeight, ref desiredWidth, ref desiredHeight);
                    }
                }

                protected override void RenderRecursive(DrawingContext dc)
                {
                    if (this._redirect)
                    {
                        int num;
                        int num2;
                        int num3;
                        int num4;
                        dc = this._displayModule._drawingContext;
                        base.RenderRecursive(dc);
                        dc.GetClippingRectangle(ref num, ref num2, ref num3, ref num4);
                        this._displayModule.Paint(dc.get_Bitmap(), num, num2, num3, num4);
                    }
                    else
                    {
                        base.RenderRecursive(dc);
                    }
                }

                public Gadgeteer.Modules.Module.DisplayModule DisplayModule
                {
                    get
                    {
                        return this._displayModule;
                    }
                }
            }

            protected enum WpfMode
            {
                Separate,
                PassThrough
            }
        }

        public abstract class NetworkModule : Module
        {
            private bool _isNetworkUp;
            private object _Lock = new object();
            protected AutoResetEvent _needDHCP = new AutoResetEvent(false);
            protected bool _networkAvailable;
            private NetworkEventHandler _NetworkDown;
            private NetworkEventHandler _NetworkUp;
            private NetworkEventHandler _OnNetwork;
            protected bool _useDHCP;
            private Thread dhcpThread;
            protected ManualResetEvent NetworkAvailablityBlocking;
            private byte[] physicalAddress;

            private event NetworkEventHandler _NetworkDown
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                add
                {
                    this._NetworkDown = (NetworkEventHandler)Delegate.Combine((Delegate)this._NetworkDown, (Delegate)value);
                }
                [MethodImpl(MethodImplOptions.Synchronized)]
                remove
                {
                    this._NetworkDown = (NetworkEventHandler)Delegate.Remove((Delegate)this._NetworkDown, (Delegate)value);
                }
            }

            private event NetworkEventHandler _NetworkUp
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                add
                {
                    this._NetworkUp = (NetworkEventHandler)Delegate.Combine((Delegate)this._NetworkUp, (Delegate)value);
                }
                [MethodImpl(MethodImplOptions.Synchronized)]
                remove
                {
                    this._NetworkUp = (NetworkEventHandler)Delegate.Remove((Delegate)this._NetworkUp, (Delegate)value);
                }
            }

            public event NetworkEventHandler NetworkDown
            {
                add
                {
                    object obj2 = this._Lock;
                    lock (obj2)
                    {
                        if (!this.IsNetworkUp)
                        {
                            object[] args = new object[] { this, NetworkState.Down };
                            Program.BeginInvoke((Delegate)value, args);
                        }
                        this._NetworkDown += value;
                    }
                }
                remove
                {
                    object obj2 = this._Lock;
                    lock (obj2)
                    {
                        this._NetworkDown -= value;
                    }
                }
            }

            public event NetworkEventHandler NetworkUp
            {
                add
                {
                    object obj2 = this._Lock;
                    lock (obj2)
                    {
                        if (this._isNetworkUp)
                        {
                            object[] args = new object[] { this, NetworkState.Up };
                            Program.BeginInvoke((Delegate)value, args);
                        }
                        this._NetworkUp += value;
                    }
                }
                remove
                {
                    object obj2 = this._Lock;
                    lock (obj2)
                    {
                        this._NetworkUp -= value;
                    }
                }
            }

            protected NetworkModule()
            {
                NetworkChange.add_NetworkAvailabilityChanged(new NetworkAvailabilityChangedEventHandler(this, (IntPtr)this.NetworkChange_NetworkAvailabilityChanged));
                this._isNetworkUp = false;
                this.dhcpThread = new Thread(new ThreadStart(this.DHCPThread));
                this.dhcpThread.Start();
            }

            protected void DHCPThread()
            {
                Label_0000:;
                try
                {
                    this._needDHCP.WaitOne();
                    if (this._useDHCP)
                    {
                        NetworkInterface networkSettings = this.NetworkSettings;
                        if (!networkSettings.get_IsDhcpEnabled())
                        {
                            networkSettings.EnableDhcp();
                        }
                        else
                        {
                            networkSettings.RenewDhcpLease();
                        }
                        this._isNetworkUp = true;
                        this.OnNetworkEvent(this, NetworkState.Up);
                    }
                    goto Label_0000;
                }
                catch
                {
                    base.ErrorPrint("DHCP Error - networking may not work");
                    goto Label_0000;
                }
            }

            private bool IsThisModuleAddress(byte[] physicalAddress)
            {
                if (physicalAddress == null)
                {
                    return false;
                }
                if (physicalAddress.Length != this.physicalAddress.Length)
                {
                    return false;
                }
                for (int i = 0; i < physicalAddress.Length; i++)
                {
                    if (physicalAddress[i] != this.physicalAddress[i])
                    {
                        return false;
                    }
                }
                return true;
            }

            private void NetworkChange_NetworkAvailabilityChanged(object sender, NetworkAvailabilityEventArgs e)
            {
                if ((e.get_IsAvailable() == this.IsNetworkConnected) && (e.get_IsAvailable() != this._networkAvailable))
                {
                    if (e.get_IsAvailable())
                    {
                        if (this._useDHCP)
                        {
                            this._needDHCP.Set();
                        }
                        else
                        {
                            this._isNetworkUp = true;
                            this.OnNetworkEvent(this, NetworkState.Up);
                        }
                    }
                    else
                    {
                        this._isNetworkUp = false;
                        this.OnNetworkEvent(this, NetworkState.Down);
                    }
                    this._networkAvailable = e.get_IsAvailable();
                }
            }

            protected virtual void OnNetworkEvent(Module.NetworkModule sender, NetworkState state)
            {
                if (this._OnNetwork == null)
                {
                    this._OnNetwork = new NetworkEventHandler(this.OnNetworkEvent);
                }
                object[] args = new object[] { sender, state };
                if (Program.CheckAndInvoke((state == NetworkState.Up) ? ((Delegate)this._NetworkUp) : ((Delegate)this._NetworkDown), (Delegate)this._OnNetwork, args))
                {
                    if (state != NetworkState.Up)
                    {
                        if (state != NetworkState.Down)
                        {
                            return;
                        }
                    }
                    else
                    {
                        this._NetworkUp(sender, state);
                        return;
                    }
                    this._NetworkDown(sender, state);
                }
            }

            public void UseDHCP()
            {
                this._useDHCP = true;
                if (this.IsNetworkConnected)
                {
                    this._needDHCP.Set();
                }
            }

            public void UseStaticIP(string ipAddress, string subnetMask, string gatewayAddress)
            {
                this.UseStaticIP(ipAddress, subnetMask, gatewayAddress, null);
            }

            public void UseStaticIP(string ipAddress, string subnetMask, string gatewayAddress, string[] dnsAddresses)
            {
                this._useDHCP = false;
                this.NetworkSettings.EnableStaticIP(ipAddress, subnetMask, gatewayAddress);
                if (dnsAddresses != null)
                {
                    this.NetworkSettings.EnableStaticDns(dnsAddresses);
                }
                if (this.IsNetworkConnected)
                {
                    this._networkAvailable = true;
                    this._isNetworkUp = true;
                    this.OnNetworkEvent(this, NetworkState.Up);
                }
            }

            public abstract bool IsNetworkConnected { get; }

            public bool IsNetworkUp
            {
                get
                {
                    return this._isNetworkUp;
                }
                protected set
                {
                    this._isNetworkUp = value;
                }
            }

            public NetworkInterface NetworkSettings
            {
                get
                {
                    if (this.physicalAddress != null)
                    {
                        NetworkInterface[] allNetworkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
                        for (int i = 0; i < allNetworkInterfaces.Length; i++)
                        {
                            if (this.IsThisModuleAddress(allNetworkInterfaces[i].get_PhysicalAddress()))
                            {
                                return allNetworkInterfaces[i];
                            }
                        }
                    }
                    return null;
                }
                protected set
                {
                    this.physicalAddress = value.get_PhysicalAddress();
                }
            }

            public delegate void NetworkEventHandler(Module.NetworkModule sender, Module.NetworkModule.NetworkState state);

            public enum NetworkState
            {
                Up,
                Down
            }
        }
        */
    }
}
